{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs28 \cf0 README General\

\fs24 \
\
The section 
\b FILES
\b0  contains a brief description of the scripts in this directory. The section 
\b RUNNING THE CODE
\b0  below produces some of the basic plots. Please also refer to the Methods section in Jaramillo et al., 2019. \
\

\b FILES
\b0 \
\

\b - thalamusloop.py\
\

\b0 This is the main file, which generates cortical and thalamic plots for different task conditions, including: wm (working memory), dm (decision memory), and confidence, which includes Fig 6A. (see description in the section 
\b RUNNING THE CODE)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b0 \cf0 \
- 
\b pulvinarparams.py
\b0 \
\
This file contains all of the necessary parameters for the simulations. \
\
Task parameters: \

\i exp
\i0 : this parameter stands for experiment, which can be wm (working memory), dm (decision making)\

\i exptype
\i0 : wmgate (working memory, Fig. 3), confidence (Fig 6)\

\i actualsetting
\i0 : this sets the weights of the model, and has the form  [\'91a\'92,\'92b\'92 ]\
\
\'91a\'92 refers to the cortical weight parameters and can be 'loop-like\'92 (for wm and dm computations) or \'91symmetric\'92 \
\'91b\'92 refers to the pulvinar weight parameters \'92yes_p_fixed\'92, \'91yes_p_variable\'92, or \'91confidence\'92\
\
For example, for confidence simulations use the following settings: \
\
exp = \'91dm\'92, exptype = \'91confidence\'92, actualsetting =  ['loop-like', 'confidence']\
\

\i trials_transition
\i0 : number of trials to be simulated\
\
The most updated list of simulation parameters is in the Jaramillo et al., 2019 paper itself (see Table on page 9). 
\b \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b0 \cf0 \

\b - maintwoloopLR.py\

\b0 \
This file produces the simulation data necessary for other files, including 
\b thalamusloop.py
\b0  . Specifically, 
\b maintwoloopLR.py 
\b0 solves differential equations for the relevant synaptic variables in the cortex (4 variables) and pulvinar (1 variable for confidence-related simulations ; 2 variables for working memory and attention). \
\
- 
\b functionstwoloopLR_pnumber.py
\b0 \
\
This file contains all functions that are necessary for the rest of the files, including definition of the differential equations that are solved in 
\b maintwoloopLR.py
\b0 , FIcurves, auxiliary functions, etc. \
- 
\b pulvinar_confidence.py
\b0 \
\
This file generates the plots related to the Komura et al., 2013 experiment, including rate and behavior (Fig 6 B-D). \
\
- 
\b thalam_switch.py
\b0 \
\
This file generates Fig 5B, the \'91thalamic switch\'92. \
\

\b RUNNING THE CODE\

\b0 \
The main file is 
\b \'91thalamusloop.py\'92
\b0 , which contains the function main(). \

\i allmain = main() \

\i0 This gives you the basic simulation, which stores 6 firing rate variables in a vector \'91allmain\'92 (name is arbitrary). The six firing rate variables are the following: two for each of the two cortical areas, and two for the pulvinar. For confidence simulations, one can ignore the second cortical area as well as the second pulvinar population and thus 3 relevant firing rate variables in total.\
\

\i \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 plot_rates (cohindex,trial,i_lambda,vecs, det)\

\i0 This function provides the basic plots of the cortex and pulvinar neural dynamics, depending on the crucial parameters defined on 
\b \'91pulvinarparams.py\'92
\i\b0 \
cohindex
\i0  = this indicates the coherence, which can be one of three values (indices: 0, 1, 2)\

\i trial 
\i0 = trial index\

\i i_lambda
\i0  = set to 0\

\i vecs 
\i0 = this is the firing rate vector contained in \'91all main\'92 (see above)\

\i det 
\i0 = if det is \'91absolute\'92, then the pulvinar calculates an exact absolute value of the difference in firing rates between the cortical populations using the built-in python function abs. At any other value, the pulvinar will calculate an approximate absolute value difference based on corticothalamic physiology, as used in the paper. \
}